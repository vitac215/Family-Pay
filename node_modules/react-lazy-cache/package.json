{
  "_args": [
    [
      {
        "raw": "react-lazy-cache@^3.0.1",
        "scope": null,
        "escapedName": "react-lazy-cache",
        "name": "react-lazy-cache",
        "rawSpec": "^3.0.1",
        "spec": ">=3.0.1 <4.0.0",
        "type": "range"
      },
      "/Users/vitachen/Documents/SP2017/PNCAPIFest/PNCAPIFest/node_modules/redux-form"
    ]
  ],
  "_from": "react-lazy-cache@>=3.0.1 <4.0.0",
  "_id": "react-lazy-cache@3.0.1",
  "_inCache": true,
  "_location": "/react-lazy-cache",
  "_nodeVersion": "5.2.0",
  "_npmUser": {
    "name": "erikras",
    "email": "rasmussenerik@gmail.com"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-lazy-cache@^3.0.1",
    "scope": null,
    "escapedName": "react-lazy-cache",
    "name": "react-lazy-cache",
    "rawSpec": "^3.0.1",
    "spec": ">=3.0.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/redux-form"
  ],
  "_resolved": "https://registry.npmjs.org/react-lazy-cache/-/react-lazy-cache-3.0.1.tgz",
  "_shasum": "0dc64d38df1767ef77678c5c94190064cb11b0cd",
  "_shrinkwrap": null,
  "_spec": "react-lazy-cache@^3.0.1",
  "_where": "/Users/vitachen/Documents/SP2017/PNCAPIFest/PNCAPIFest/node_modules/redux-form",
  "author": {
    "name": "Erik Rasmussen",
    "email": "rasmussenerik@gmail.com",
    "url": "http://github.com/erikras"
  },
  "bugs": {
    "url": "git://github.com/erikras/react-lazy-cache/issues"
  },
  "dependencies": {
    "deep-equal": "^1.0.1"
  },
  "description": "A utility to lazily calculate and cache values in a react component based on props",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-core": "^5.8.25",
    "babel-eslint": "^4.1.3",
    "babel-loader": "^5.3.2",
    "eslint": "^1.6.0",
    "eslint-config-airbnb": "^0.1.0",
    "eslint-plugin-react": "^3.5.1",
    "expect": "^1.12.1",
    "mocha": "^2.3.3",
    "rifraf": "^2.0.2",
    "rimraf": "^2.4.3",
    "webpack": "^1.12.2"
  },
  "directories": {},
  "dist": {
    "shasum": "0dc64d38df1767ef77678c5c94190064cb11b0cd",
    "tarball": "https://registry.npmjs.org/react-lazy-cache/-/react-lazy-cache-3.0.1.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "d6124f71560351f37db2368d806bc88b5b80b5fa",
  "homepage": "https://github.com/erikras/react-lazy-cache",
  "keywords": [
    "react",
    "cache",
    "lazy",
    "memoize",
    "reactjs",
    "calculate"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "erikras",
      "email": "rasmussenerik@gmail.com"
    }
  ],
  "name": "react-lazy-cache",
  "npmFileMap": [
    {
      "basePath": "/dist/",
      "files": [
        "*.js"
      ]
    }
  ],
  "npmName": "react-lazy-cache",
  "optionalDependencies": {},
  "readme": "#react-lazy-cache\n\n[![NPM Version](https://img.shields.io/npm/v/react-lazy-cache.svg?style=flat-square)](https://www.npmjs\n.com/package/react-lazy-cache) \n[![NPM Downloads](https://img.shields.io/npm/dm/react-lazy-cache.svg?style=flat-square)](https://www.npmjs.com/package/react-lazy-cache)\n[![Build Status](https://img.shields.io/travis/erikras/react-lazy-cache/master.svg?style=flat-square)](https://travis-ci.org/erikras/react-lazy-cache)\n\n`react-lazy-cache` is a utility to lazily calculate and cache values in a React component based on props.\n\n## Installation\n\n```\nnpm install --save react-lazy-cache\n```\n\n## Why?\n\nIdeally, in a React component, you would calculate values that depend on your props inputs every time the component \nis rendered. However, in practice, sometimes these values, either for computational or memory reasons, are better off\ncached. When you cache them, however, you need to be constantly watching your props to know if you need to \ninvalidate your cache and recalculate those values. _That_ is what `react-lazy-cache` does for you.\n\n## Usage\n\n`react-lazy-cache` could not be simpler to use. You simply need to give it a map of calculations, and let it know \nwhen your component will receive new props.\n\n```javascript\nimport React, {Component, PropTypes} from 'react';\nimport lazyCache from 'react-lazy-cache';\n\nexport default class Arithmetic extends Component {\n  static propTypes = {\n    a: PropTypes.number.isRequired,\n    b: PropTypes.number.isRequired\n  }\n  \n  componentWillMount() {\n    // create cache\n    this.cache = lazyCache(this, {\n      sum: {\n        params: ['a', 'b'],\n        fn: (a, b) => a + b\n      },\n      difference: {\n        params: ['a', 'b'],\n        fn: (a, b) => a - b\n      },\n      product: {\n        params: ['a', 'b'],\n        fn: (a, b) => a * b\n      },\n      quotient: {\n        params: ['a', 'b'],\n        fn: (a, b) => a / b\n      },\n      sumSquared: {\n        params: ['sum'],\n        fn: (sum) => sum * sum\n      }\n    });\n  }\n  \n  componentWillReceiveProps(nextProps) {\n    this.cache.componentWillReceiveProps(nextProps);\n  }\n  \n  render() {\n    const {sum, difference, product, quotient, sumSquared} = this.cache;\n    return (<div>\n      <div>Sum: {sum}</div>\n      <div>Difference: {difference}</div>\n      <div>Product: {product}</div>\n      <div>Quotient: {quotient}</div>\n      <div>Sum Squared: {sumSquared}</div>\n    </div>);\n  }\n}\n```\n\nTwo things to notice about the above example:\n\n### Lazy\n\nThe values do not get calculated until the properties on the `cache` object get referenced in render(). \nThat's why it's \"lazy\". They will not be calculated again unless one of the props that the calculation depends on\nchanges.\n\n### Selecting Parameters\n \nWhen you specify your functions to calculate each value, you must specify the `params`, which refer either to props \ngiven to your React component, _or_ to other calculated values (see: `sumSquared`).\n\n**Be careful to not cause an infinite dependency loop!**\n\n### Internet Explorer 8 support\n\nAs this library utilizes Getters, which are not shimmable in IE8 and older, an alternate `noGetters` module is exposed.\nThis version allows you to cache values, but are not able to inject other values such as `sumSquared`. Usage:\n\n```javascript\nimport LazyCache from 'react-lazy-cache/noGetters';\n\nconst cache = new LazyCache(...) // same signature as normal version\n\nconst sum = cache.get('sum');\n```\n\nThe difference is that it's a class and not a plain function (so you have to `new` it), and properties are accessed\nthrough the `get`-function, instead of as a property.\n\n\n## Conclusion\n\nThat's all you need to know! Go forth and intelligently cache your calculated values!\n\nFeedback welcome.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/erikras/react-lazy-cache.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:umd && npm run build:umd:min",
    "build:lib": "babel src --out-dir lib",
    "build:umd": "webpack src/index.js dist/react-lazy-cache.js --config webpack.config.development.js",
    "build:umd:min": "webpack src/index.js dist/react-lazy-cache.min.js --config webpack.config.production.js",
    "clean": "rimraf dist lib",
    "lint": "eslint src",
    "prepublish": "npm run lint && npm run test && npm run clean && npm run build",
    "test": "mocha --compilers js:babel/register --recursive"
  },
  "version": "3.0.1"
}
